import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from app.config import config
from app.database import db
from app.game_menus import GameMenus, TextTemplates
from app.game_manager import GameManager
from app.hand_analyzer import hand_analyzer, history_analyzer
from app.history_manager import history_manager
from app.statistics import stats_manager
from app.ml.model_trainer import model_trainer

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ:
from app.poker_engine import Card, Rank, Suit
from app.game_menus import AnalysisMenus

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class PokerMentorBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        is_valid, message = config.validate()
        if not is_valid:
            logger.error(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞: {message}")
            raise ValueError(message)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.init_db()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏–≥—Ä
        self.game_manager = GameManager()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
        self.token = config.get('TELEGRAM_BOT_TOKEN')
        self.application = Application.builder().token(self.token).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._setup_handlers()
        logger.info("Poker Mentor Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self._handle_start))
        self.application.add_handler(CommandHandler("help", self._handle_help))
        self.application.add_handler(CommandHandler("settings", self._handle_settings))

        self.application.add_handler(CommandHandler("test_game", self._handle_test_game))
        self.application.add_handler(CommandHandler("choose_ai", self._handle_choose_ai))

        self.application.add_handler(CommandHandler("analyze", self._handle_analyze))  # ‚Üê –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£
        self.application.add_handler(CommandHandler("debug", self._handle_debug))

        self.application.add_handler(CommandHandler("history", self._handle_history))
        self.application.add_handler(CommandHandler("stats", self._handle_stats))

        self.application.add_handler(CommandHandler("ml_status", self._handle_ml_status))
        self.application.add_handler(CommandHandler("train_ml", self._handle_train_ml))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(CallbackQueryHandler(self._handle_callback_query))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_text_message))

        self.application.add_handler(CommandHandler("profile", self._handle_profile))
        self.application.add_handler(CommandHandler("learning", self._handle_learning))
    
    # ===== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
    
    async def _handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        db_user = db.add_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_stats = db.get_user_stats(db_user['id'])
        hands_played = user_stats['total_hands_played'] if user_stats else 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_text = TextTemplates.get_welcome_text(
            user.first_name, db_user['level'], hands_played
        )
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=GameMenus.get_main_menu()
        )
    
    async def _handle_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(TextTemplates.get_help_text())
    
    async def _handle_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        await update.message.reply_text(
            "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ –í–µ—Ä—Å–∏—è: 1.0\n"
            f"‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.get('DATABASE_URL', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞')}\n"
            f"‚Ä¢ –°—Ç–∞–≤–∫–∏: {config.get('DEFAULT_STAKE', '1/2')}\n\n"
            "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª config.txt"
        )
    
    async def _handle_test_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test_game"""
        user_id = str(update.effective_user.id)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∏–≥—Ä—É
        game = self.game_manager.create_game(user_id, "fish")
        game_state = self.game_manager.get_game_state(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–µ
        game_text = TextTemplates.get_game_start_text(
            "Fish", 
            GameMenus.get_ai_description("fish"),
            game_state["user_cards"],
            game_state["user_stack"],
            game_state["pot"]
        )
        
        await update.message.reply_text(game_text)
        await self._show_game_actions(update, context, user_id)
    
    async def _handle_choose_ai(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /choose_ai"""
        await update.message.reply_text(
            "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø AI –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞:",
            reply_markup=GameMenus.get_ai_selection_menu()
        )
    
    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö =====
    
    async def _handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
    
        user_id = str(update.effective_user.id)
        callback_data = query.data
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä AI
        if callback_data.startswith("ai_"):
            ai_type = callback_data[3:]
            await self._start_game_with_ai(query, user_id, ai_type)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        elif callback_data.startswith("game_"):
            action = callback_data[5:]
            await self._handle_game_action(query, user_id, action)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ ‚Üê –î–û–ë–ê–í–¨ –≠–¢–û–¢ –ë–õ–û–ö
        elif callback_data.startswith("analyze_"):
            await self._handle_analysis(query, callback_data[8:])
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ ‚Üê –î–û–ë–ê–í–¨ –≠–¢–û–¢ –ë–õ–û–ö
        elif callback_data.startswith("position_"):
            await self._handle_position_selection(query, callback_data[9:]) 

    async def _handle_analysis(self, query, analysis_type: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞"""
        from app.game_menus import AnalysisMenus  # ‚Üê –î–û–ë–ê–í–¨ –≠–¢–û–¢ –ò–ú–ü–û–†–¢
    
        if analysis_type == "preflop":
            await query.edit_message_text(
                "üÉè **–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ñ–ª–æ–ø —Ä—É–∫–∏**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–æ–∑–∏—Ü–∏—é –∑–∞ —Å—Ç–æ–ª–æ–º:",
                reply_markup=AnalysisMenus.get_position_selection_menu()
            )
        elif analysis_type == "postflop":
            await query.edit_message_text(
                "üìä **–ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç—Ñ–ª–æ–ø–∞**\n\n"
                "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ñ–ª–æ–ø–∞.")
        elif analysis_type == "hand_history":
            await query.edit_message_text(
                "üìà **–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–∞—á–∏**\n\n"
                "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ñ–ª–æ–ø–∞.")

    async def _handle_position_selection(self, query, position: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context = query.data.split('_')[-1]
    
        await query.edit_message_text(
            f"üé™ **–ü–æ–∑–∏—Ü–∏—è: {self._get_position_name(position)}**\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            f"**AKs** - Ace-King suited\n"
            f"**QJo** - Queen-Jack offsuit\n"
            f"**TT** - –ø–∞—Ä–∞ –¥–µ—Å—è—Ç–æ–∫\n\n"
            f"–ü—Ä–∏–º–µ—Ä—ã: AKs, QJo, 99, T2s")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–∞—Ä—Ç
        self.waiting_for_cards = {
            "user_id": query.from_user.id,
            "position": position,
            "message_id": query.message.message_id}

    def _get_position_name(self, position: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        names = {
            "early": "–†–∞–Ω–Ω—è—è –ø–æ–∑–∏—Ü–∏—è",
            "middle": "–°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è", 
            "late": "–ü–æ–∑–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è",
            "blinds": "–ë–ª–∞–π–Ω–¥—ã"}
        return names.get(position, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è")

    async def _handle_analyze(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze"""
        from app.game_menus import AnalysisMenus  # ‚Üê –î–û–ë–ê–í–¨ –≠–¢–û–¢ –ò–ú–ü–û–†–¢
    
        await update.message.reply_text(
        "üìä **–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–µ—Ä–Ω—ã—Ö —Ä—É–∫**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=AnalysisMenus.get_analysis_menu())

    async def _handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.strip()  # ‚Üê –î–û–ë–ê–í–¨ .strip()
        user_id = update.effective_user.id


        if hasattr(self, 'waiting_for_cards') and self.waiting_for_cards["user_id"] == user_id:
            await self._process_hand_input(update, text)
            return
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if text == "üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞":
            await self._handle_test_game(update, context)
        elif text == "üìä –ê–Ω–∞–ª–∏–∑ —Ä—É–∫–∏":
            await self._handle_analyze(update, context)  # ‚Üê –ò–ó–ú–ï–ù–ò –≠–¢–£ –°–¢–†–û–ö–£
        elif text == "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await update.message.reply_text("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        elif text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
            await update.message.reply_text("üë§ –ü—Ä–æ—Ñ–∏–ª—å - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        elif text == "üìö –û–±—É—á–µ–Ω–∏–µ":
            await update.message.reply_text("üìö –û–±—É—á–µ–Ω–∏–µ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–≥—Ä—É":
            await update.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä—ã - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã!")
    
    # ===== –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê =====
    
    async def _start_game_with_ai(self, query, user_id: str, ai_type: str):
        """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º AI"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
            game = self.game_manager.create_game(user_id, ai_type)
            game_state = self.game_manager.get_game_state(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–µ
            game_text = TextTemplates.get_game_start_text(
                game_state["ai_name"],
                GameMenus.get_ai_description(ai_type),
                game_state["user_cards"],
                game_state["user_stack"],
                game_state["pot"]
            )
            
            await query.edit_message_text(game_text)
            await self._show_game_actions_by_chat(
                query, query.message.chat_id, user_id
            )
            
        except Exception as e:
            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã: {e}")
    
    async def _handle_game_action(self, query, user_id: str, action: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–≥—Ä–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –∏–≥—Ä
        result = self.game_manager.process_player_action(user_id, action)
        
        if "error" in result:
            await query.edit_message_text(result["error"])
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = result["message"]
        if "ai_message" in result:
            response_text += f"\n{result['ai_message']}"
        
        response_text += f"\n\nüí∞ –ë–∞–Ω–∫: {result['pot']} BB"
        response_text += f"\nüíµ –í–∞—à —Å—Ç–µ–∫: {result['player_stack']} BB"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ community cards
        if result.get("community_cards"):
            street = "–§–ª–æ–ø" if len(result["community_cards"]) == 3 else "–¢–µ—Ä–Ω" if len(result["community_cards"]) == 4 else "–†–∏–≤–µ—Ä"
            response_text += f"\n\nüÉè {street}: {' '.join(str(card) for card in result['community_cards'])}"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
        if not result.get("game_continues", True):
            if "winner" in result:
                response_text += f"\n\nüèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {result['winner']}"
                response_text += f"\nüéØ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {result['winning_hand']}"
            self.game_manager.end_game(user_id)
            await query.edit_message_text(response_text)
            return
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
        await query.edit_message_text(response_text)
        await self._show_game_actions_by_chat(query, query.message.chat_id, user_id)
    
    # ===== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø =====
    
    async def _show_game_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=GameMenus.get_game_actions_menu()
        )
    
    async def _show_game_actions_by_chat(self, update, chat_id: int, user_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ chat_id"""
        await update._bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=GameMenus.get_game_actions_menu()
        )
    
    async def _process_hand_input(self, update: Update, hand_input: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Ä—É–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            from app.poker_engine import Card, Rank, Suit  # ‚Üê –î–û–ë–ê–í–¨ –≠–¢–û–¢ –ò–ú–ü–û–†–¢
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            waiting_data = self.waiting_for_cards
            position = waiting_data["position"]
        
        # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ —Ä—É–∫–∏
            cards = self._parse_hand_input(hand_input)
            if not cards:
                await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä—É–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: AKs, QJo, 99 –∏ —Ç.–¥.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—É–∫—É
            analysis = hand_analyzer.analyze_preflop_hand(cards, position)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            analysis_text = TextTemplates.get_hand_analysis_text(analysis)
            await update.message.reply_text(analysis_text, parse_mode='Markdown')
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            del self.waiting_for_cards
        
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            if hasattr(self, 'waiting_for_cards'):
                del self.waiting_for_cards

    def _parse_hand_input(self, hand_input: str):
        """–ü–∞—Ä—Å–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ —Ä—É–∫–∏ –≤ –∫–∞—Ä—Ç—ã"""
        from app.poker_engine import Card, Rank, Suit  # ‚Üê –î–û–ë–ê–í–¨ –≠–¢–û–¢ –ò–ú–ü–û–†–¢
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        if len(hand_input) < 2:
            return None
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ä–∞–Ω–≥–∏
        rank_map = {
            'A': Rank.ACE, 'K': Rank.KING, 'Q': Rank.QUEEN, 'J': Rank.JACK,
            'T': Rank.TEN, '9': Rank.NINE, '8': Rank.EIGHT, '7': Rank.SEVEN,
            '6': Rank.SIX, '5': Rank.FIVE, '4': Rank.FOUR, '3': Rank.THREE, '2': Rank.TWO}
    
        try:
        # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç —Ç–∏–ø–∞ "AKs", "QJo", "99"
            if len(hand_input) == 2:
            # –ü–∞—Ä–∞
                rank_char = hand_input[0]
                if rank_char not in rank_map:
                    return None
                rank = rank_map[rank_char]
                return [Card(rank, Suit.HEARTS), Card(rank, Suit.DIAMONDS)]
        
            elif len(hand_input) == 3:
            # –î–≤–µ –∫–∞—Ä—Ç—ã
                rank1_char, rank2_char, suit_indicator = hand_input
            
                if rank1_char not in rank_map or rank2_char not in rank_map:
                    return None
            
                rank1 = rank_map[rank1_char]
                rank2 = rank_map[rank2_char]
            
                if suit_indicator == 's':
                # suited
                    return [Card(rank1, Suit.HEARTS), Card(rank2, Suit.HEARTS)]
                elif suit_indicator == 'o':
                # offsuit
                    return [Card(rank1, Suit.HEARTS), Card(rank2, Suit.DIAMONDS)]
                else:
                    return None
        
            return None
        
        except Exception:
            return None

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting Poker Mentor Bot...")
        print("ü§ñ –ó–∞–ø—É—Å–∫ Poker Mentor Bot...")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        self.application.run_polling()
# –î–û–ë–ê–í–ò–¢–¨ –≤ –∫–ª–∞—Å—Å PokerMentorBot:

    async def _handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            query = update.callback_query
            await query.answer()
        
            user_id = str(update.effective_user.id)
            callback_data = query.data

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä AI
            if callback_data.startswith("ai_"):
                ai_type = callback_data[3:]
                await self._start_game_with_ai(query, user_id, ai_type)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            elif callback_data.startswith("game_"):
                action = callback_data[5:]
                await self._handle_game_action(query, user_id, action)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑
            elif callback_data.startswith("analyze_"):
                await self._handle_analysis(query, callback_data[8:])

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏
            elif callback_data.startswith("position_"):
                await self._handle_position_selection(query, callback_data[9:])
            
            elif callback_data.startswith("settings_"):
                await self._handle_settings(query, callback_data[9:])

            elif callback_data.startswith("set_"):
                await self._handle_setting_change(query, callback_data[4:])
            
            elif callback_data.startswith("profile_"):
                await self._handle_profile_callback(query, callback_data[8:])

            elif callback_data.startswith("learn_") or callback_data.startswith("lesson_"):
                await self._handle_learning_callback(query, callback_data)

            else:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback: {e}")
            await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


    async def _handle_profile_callback(self, query, action: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –ø—Ä–æ—Ñ–∏–ª—è"""
        if action == "level":
            await query.edit_message_text(
                "üéì **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–æ–≤:**",
                reply_markup=ProfileMenus.get_level_selection_menu()
            )
        elif action.startswith("set_level_"):
            level = action[10:]
            level_names = {
                "beginner": "–ù–æ–≤–∏—á–æ–∫",
                "intermediate": "–õ—é–±–∏—Ç–µ–ª—å", 
                "advanced": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
            }
            await query.edit_message_text(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {level_names.get(level, level)}")
        elif action == "back":
            await self._handle_profile(query, query.message.chat_id)

    async def _handle_learning_callback(self, query, lesson: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—É—á–µ–Ω–∏—è"""
        if lesson == "learn_basics":
            await query.edit_message_text(
                "üéØ **–û—Å–Ω–æ–≤—ã –ø–æ–∫–µ—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
                reply_markup=LearningMenus.get_lesson_menu("basics")
            )
        elif lesson == "lesson_basics_rules":
            await query.edit_message_text(
                "üìñ **–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¢–µ—Ö–∞—Å—Å–∫–æ–≥–æ –•–æ–ª–¥–µ–º–∞:**\n\n"
                "‚Ä¢ –ò–≥—Ä–∞–µ—Ç—Å—è –∫–æ–ª–æ–¥–æ–π –∏–∑ 52 –∫–∞—Ä—Ç\n"
                "‚Ä¢ –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç 2 –∫–∞—Ä—Ç—ã\n"
                "‚Ä¢ –ù–∞ —Å—Ç–æ–ª –≤—ã–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è 5 –æ–±—â–∏—Ö –∫–∞—Ä—Ç\n"
                "‚Ä¢ –¶–µ–ª—å - —Å–æ–±—Ä–∞—Ç—å –ª—É—á—à—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏–∑ 5 –∫–∞—Ä—Ç\n"
                "‚Ä¢ –°—Ç–∞–≤–∫–∏ –¥–µ–ª–∞—é—Ç—Å—è –≤ 4 —Ä–∞—É–Ω–¥–∞: –ø—Ä–µ—Ñ–ª–æ–ø, —Ñ–ª–æ–ø, —Ç–µ—Ä–Ω, —Ä–∏–≤–µ—Ä\n\n"
                "üí° _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–∏ 2 –∫–∞—Ä—Ç—ã + 5 –æ–±—â–∏—Ö –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏_"
            )
        elif lesson == "learning_back":
            await query.edit_message_text(
                "üìö **Poker Mentor - –û–±—É—á–µ–Ω–∏–µ**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                reply_markup=LearningMenus.get_learning_menu()
            )
        else:
            await query.edit_message_text("üìö –£—Ä–æ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

    async def _handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            text = update.message.text.strip()
            user_id = update.effective_user.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–∞—Ä—Ç
            if hasattr(self, 'waiting_for_cards') and self.waiting_for_cards.get("user_id") == user_id:
                await self._process_hand_input(update, text)
                return
            elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–≥—Ä—É":
                await self._handle_settings_menu(update, context)
            elif text == "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                await self._handle_stats(update, context)
            elif text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
                await self._handle_profile(update, context)
            elif text == "üìö –û–±—É—á–µ–Ω–∏–µ":
                await self._handle_learning(update, context)
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            menu_actions = {
                "üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞": self._handle_test_game,
                "üìä –ê–Ω–∞–ª–∏–∑ —Ä—É–∫–∏": self._handle_analyze,
                "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": lambda u, c: u.message.reply_text("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"),
                "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å": lambda u, c: u.message.reply_text("üë§ –ü—Ä–æ—Ñ–∏–ª—å - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"),
                "üìö –û–±—É—á–µ–Ω–∏–µ": lambda u, c: u.message.reply_text("üìö –û–±—É—á–µ–Ω–∏–µ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"),
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–≥—Ä—É": lambda u, c: u.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä—ã - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            }

            if text in menu_actions:
                await menu_actions[text](update, context)
            else:
                await update.message.reply_text(
                    "ü§î –Ø –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é!",
                    reply_markup=GameMenus.get_main_menu()
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    async def _handle_debug(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (/debug)"""
        user_id = update.effective_user.id
        debug_info = f"""
üîß  **–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**

    üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}
    üéÆ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä: {len(self.game_manager.active_games)}
    üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.get('DATABASE_URL')}

    üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
    ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {self._get_user_count()}
    ‚Ä¢ –ò–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π: {self._get_session_count()}
        """
        await update.message.reply_text(debug_info)

    async def _handle_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä"""
        user_id = update.effective_user.id
        sessions = history_manager.get_recent_sessions(user_id, 5)
    
        if not sessions:
            await update.message.reply_text("üìù –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
            return
    
        text = "üìä **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã:**\n\n"
        for session in sessions:
            text += f"üïê **{session['date']}**\n"
            text += f"ü§ñ –û–ø–ø–æ–Ω–µ–Ω—Ç: {session['opponent']}\n"
            text += f"üéØ –†—É–∫: {session['hands_played']} | –†–µ–∑—É–ª—å—Ç–∞—Ç: {session['result']}\n"
            text += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {session['duration']}\n\n"
    
        await update.message.reply_text(text, parse_mode='Markdown')

    async def _handle_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        user_id = update.effective_user.id
        stats = stats_manager.get_user_stats(user_id)
    
        text = "üìà **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
        text += f"üéì **–£—Ä–æ–≤–µ–Ω—å:** {stats['level'].title()}\n"
        text += f"üÉè **–°—ã–≥—Ä–∞–Ω–æ —Ä—É–∫:** {stats['total_hands']}\n"
        text += f"üìä **–í–∏–Ω—Ä–µ–π—Ç:** {stats['win_rate']}\n"
        text += f"üéØ **VPIP/PFR:** {stats['vpip']}/{stats['pfr']}\n"
        text += f"‚ö° **–ê–≥—Ä–µ—Å—Å–∏—è:** {stats['aggression']}\n\n"
    
        text += "‚≠ê **–õ—É—á—à–∞—è —Ä—É–∫–∞:** {stats['best_hand']}\n"
        text += "üí° **–û—Å–Ω–æ–≤–Ω–∞—è —É—Ç–µ—á–∫–∞:** {stats['worst_leak']}\n"
        text += "üìà **–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –º–µ—Å—è—Ü:** {stats['monthly_progress']}\n\n"
    
        text += "_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /history –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä_"
    
        await update.message.reply_text(text, parse_mode='Markdown')
    async def _handle_ml_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç—É—Å ML —Å–∏—Å—Ç–µ–º—ã"""
        status = model_trainer.get_training_status()
    
        text = "ü§ñ **–°—Ç–∞—Ç—É—Å ML —Å–∏—Å—Ç–µ–º—ã:**\n\n"
        text += f"üìä **–î–∞–Ω–Ω—ã—Ö —Å–æ–±—Ä–∞–Ω–æ:** {status['data_collected']}\n"
        text += f"üéØ **–°—Ç–∞—Ç—É—Å:** {status['status']}\n"
        text += f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {status['recommendation']}\n\n"
    
        if status['data_collected'] > 0:
            text += "_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /train_ml –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è_"
    
        await update.message.reply_text(text, parse_mode='Markdown')

    async def _handle_train_ml(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–∏"""
        result = model_trainer.start_training()
    
        text = "üéØ **–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è ML:**\n\n"
    
        if result['status'] == 'success':
            text += "‚úÖ **–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n"
            text += f"üìà **–¢–æ—á–Ω–æ—Å—Ç—å:** {result['accuracy']}\n"
            text += f"üí° **–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:** {result['next_step']}\n"
        elif result['status'] == 'need_more_data':
            text += "üìä **–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö:**\n"
            text += f"üìù {result['message']}\n"
            text += "üí° _–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö_"
        else:
            text += "‚ùå **–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è:**\n"
            text += f"‚ö†Ô∏è {result['message']}"
    
        await update.message.reply_text(text, parse_mode='Markdown')

    async def _handle_settings_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        await update.message.reply_text(
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=SettingsMenus.get_settings_menu()
        )

    async def _handle_settings(self, query, setting_type: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if setting_type == "ai":
            await query.edit_message_text(
                "ü§ñ **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø AI –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞:**",
                reply_markup=SettingsMenus.get_ai_settings_menu()
            )
        elif setting_type == "stakes":
            await query.edit_message_text(
                "üí∞ **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–æ–∫:**",
                reply_markup=SettingsMenus.get_stakes_menu()
            )
        elif setting_type == "back":
            await query.edit_message_text(
                "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=SettingsMenus.get_settings_menu()
            )
        elif setting_type == "save":
            await query.edit_message_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

    async def _handle_setting_change(self, query, setting: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if setting.startswith("ai_"):
            ai_type = setting[3:]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = query.from_user.id
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            await query.edit_message_text(
                f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–ø–ø–æ–Ω–µ–Ω—Ç: {ai_type.upper()} AI\n\n"
                f"{GameMenus.get_ai_description(ai_type)}"
            )
        elif setting.startswith("stakes_"):
            stakes = setting[7:].replace('_', '/')
            await query.edit_message_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç–∞–≤–∫–∏: {stakes} BB")

    async def _handle_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_info = db.get_user_info(update.effective_user.id)
    
        profile_text = f"""
        üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**

        üÜî ID: {user_info['id']}
        üéì –£—Ä–æ–≤–µ–Ω—å: {user_info['level'].title()}
        üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_info['created_at'].strftime('%d.%m.%Y')}
        üÉè –°—ã–≥—Ä–∞–Ω–æ —Ä—É–∫: {user_info.get('total_hands', 0)}

        üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
    
        await update.message.reply_text(
            profile_text,
            reply_markup=ProfileMenus.get_profile_menu()
        )

    async def _handle_learning(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—É—á–µ–Ω–∏—è"""
        await update.message.reply_text(
            "üìö **Poker Mentor - –û–±—É—á–µ–Ω–∏–µ**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
            reply_markup=LearningMenus.get_learning_menu()
        )


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    try:
        bot = PokerMentorBot()
        bot.run()
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("\nüîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª config.txt")
        print("2. –ó–∞–º–µ–Ω–∏—Ç–µ 'your_bot_token_here' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
        print("3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞")
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")