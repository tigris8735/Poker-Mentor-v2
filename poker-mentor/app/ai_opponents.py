import random
import logging
from typing import List, Dict, Tuple
from app.poker_engine import PokerGame, Action, Card, Rank, Suit

logger = logging.getLogger(__name__)

class BaseAI:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è AI –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, name: str, aggression: float, tightness: float):
        self.name = name
        self.aggression = aggression  # 0-1: —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ —Ä–µ–π–∑–∞–º
        self.tightness = tightness    # 0-1: —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–∏–ª—å–Ω—ã–µ —Ä—É–∫–∏
        
    def decide_action(self, game: PokerGame, player: str) -> Tuple[Action, int]:
        """–ü—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏"""
        raise NotImplementedError

class FishAI(BaseAI):
    """–†—ã–±–∞ - –∏–≥—Ä–∞–µ—Ç –º–Ω–æ–≥–æ —Ä—É–∫, –ø–∞—Å—Å–∏–≤–Ω–∞—è"""
    
    def __init__(self):
        super().__init__("Fish", aggression=0.2, tightness=0.3)
    
    def decide_action(self, game: PokerGame, player: str) -> Tuple[Action, int]:
        cards = game.player_cards[player]
        
        # –†—ã–±–∞ –∏–≥—Ä–∞–µ—Ç –º–Ω–æ–≥–æ —Ä—É–∫
        if self._should_fold(cards):
            return Action.FOLD, 0
        
        # –ü–∞—Å—Å–∏–≤–Ω–∞—è –∏–≥—Ä–∞ - –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —á–µ–∫/–∫–æ–ª–ª
        if random.random() < 0.8:  # 80% —á–µ–∫/–∫–æ–ª–ª
            if game.current_bet > 0:
                return Action.CALL, game.current_bet
            else:
                return Action.CHECK, 0
        else:  # 20% —Ä–µ–π–∑
            raise_amount = max(game.big_blind, int(game.current_bet * 1.5))
            return Action.RAISE, raise_amount
    
    def _should_fold(self, cards: List[Card]) -> bool:
        """–†—ã–±–∞ —Ñ–æ–ª–¥–∏—Ç —Ç–æ–ª—å–∫–æ –æ—á–µ–Ω—å —Å–ª–∞–±—ã–µ —Ä—É–∫–∏"""
        ranks = [card.rank for card in cards]
        
        # –û—á–µ–Ω—å —Å–ª–∞–±—ã–µ —Ä—É–∫–∏: 2-7, 2-8 –±–µ–∑ suited/connected
        weak_ranks = [Rank.TWO, Rank.THREE, Rank.FOUR, Rank.FIVE, Rank.SIX, Rank.SEVEN]
        if all(rank in weak_ranks for rank in ranks):
            return random.random() < 0.7  # 70% —Ñ–æ–ª–¥ —Å–ª–∞–±—ã—Ö —Ä—É–∫
        
        return False

class NitAI(BaseAI):
    """–ù–∏—Ç - –∏–≥—Ä–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º —Ä—É–∫–∏, –æ—á–µ–Ω—å —Ç–∞–π—Ç–æ–≤—ã–π"""
    
    def __init__(self):
        super().__init__("Nit", aggression=0.4, tightness=0.9)
    
    def decide_action(self, game: PokerGame, player: str) -> Tuple[Action, int]:
        cards = game.player_cards[player]
        
        # –ù–∏—Ç –∏–≥—Ä–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–∏–ª—å–Ω—ã–µ —Ä—É–∫–∏
        hand_strength = self._evaluate_hand_strength(cards)
        
        if hand_strength < 0.3:  # –°–ª–∞–±—ã–µ —Ä—É–∫–∏ - —Ñ–æ–ª–¥
            return Action.FOLD, 0
        elif hand_strength < 0.6:  # –°—Ä–µ–¥–Ω–∏–µ —Ä—É–∫–∏ - —á–µ–∫/–∫–æ–ª–ª
            if game.current_bet > 0:
                return Action.CALL, game.current_bet
            else:
                return Action.CHECK, 0
        else:  # –°–∏–ª—å–Ω—ã–µ —Ä—É–∫–∏ - —Ä–µ–π–∑
            raise_amount = max(game.big_blind * 3, int(game.current_bet * 2))
            return Action.RAISE, raise_amount
    
    def _evaluate_hand_strength(self, cards: List[Card]) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Å–∏–ª—ã —Ä—É–∫–∏ –¥–ª—è –Ω–∏—Ç–∞"""
        ranks = [card.rank for card in cards]
        suits = [card.suit for card in cards]
        
        # –ü—Ä–µ–º–∏—É–º —Ä—É–∫–∏
        premium_pairs = [Rank.ACE, Rank.KING, Rank.QUEEN, Rank.JACK]
        if ranks[0] == ranks[1] and ranks[0] in premium_pairs:
            return 0.9  # AA, KK, QQ, JJ
        
        # suited connectors
        if suits[0] == suits[1]:
            rank_indices = [list(Rank).index(rank) for rank in ranks]
            if abs(rank_indices[0] - rank_indices[1]) <= 2:
                return 0.7  # suited connectors
        
        # High cards
        if any(rank in premium_pairs for rank in ranks):
            return 0.5
        
        return 0.2  # –°–ª–∞–±—ã–µ —Ä—É–∫–∏

class TAGAI(BaseAI):
    """TAG (Tight Aggressive) - —Ç–∞–π—Ç–æ–≤—ã–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π"""
    
    def __init__(self):
        super().__init__("TAG", aggression=0.7, tightness=0.7)
    
    def decide_action(self, game: PokerGame, player: str) -> Tuple[Action, int]:
        cards = game.player_cards[player]
        hand_strength = self._evaluate_hand_strength(cards)
        
        if hand_strength < 0.4:  # –§–æ–ª–¥ —Å–ª–∞–±—ã—Ö —Ä—É–∫
            return Action.FOLD, 0
        
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∏–≥—Ä–∞ —Å —Å–∏–ª—å–Ω—ã–º–∏ —Ä—É–∫–∞–º–∏
        if hand_strength > 0.7:
            if game.current_bet == 0:
                raise_amount = game.big_blind * 3
                return Action.RAISE, raise_amount
            else:
                return Action.RAISE, int(game.current_bet * 2.5)
        
        # –£–º–µ—Ä–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ —Ä—É–∫–∞–º–∏
        if game.current_bet > 0:
            return Action.CALL, game.current_bet
        else:
            return Action.CHECK, 0
    
    def _evaluate_hand_strength(self, cards: List[Card]) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Å–∏–ª—ã —Ä—É–∫–∏ –¥–ª—è TAG"""
        # –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏
        ranks = [card.rank for card in cards]
        suits = [card.suit for card in cards]
        
        # –ü–∞—Ä—ã
        if ranks[0] == ranks[1]:
            pair_value = list(Rank).index(ranks[0]) / len(Rank)
            return 0.5 + pair_value * 0.5
        
        # suited
        if suits[0] == suits[1]:
            rank_indices = sorted([list(Rank).index(rank) for rank in ranks])
            connector_bonus = 1.0 - (rank_indices[1] - rank_indices[0]) * 0.1
            high_card_bonus = rank_indices[1] / len(Rank) * 0.3
            return 0.3 + high_card_bonus + connector_bonus * 0.2
        
        # off-suited
        high_card = max(ranks, key=lambda x: list(Rank).index(x))
        high_card_value = list(Rank).index(high_card) / len(Rank)
        return 0.2 + high_card_value * 0.3

class LAGAI(BaseAI):
    """LAG (Loose Aggressive) - –ª—É–∑–æ–≤—ã–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π"""
    
    def __init__(self):
        super().__init__("LAG", aggression=0.8, tightness=0.3)
    
    def decide_action(self, game: PokerGame, player: str) -> Tuple[Action, int]:
        # LAG –∏–≥—Ä–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞
        if random.random() < 0.7:  # 70% —Ä–µ–π–∑
            if game.current_bet == 0:
                raise_amount = game.big_blind * 2
            else:
                raise_amount = int(game.current_bet * 2)
            return Action.RAISE, raise_amount
        elif game.current_bet > 0:
            return Action.CALL, game.current_bet
        else:
            return Action.CHECK, 0

class AIFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è AI –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    @staticmethod
    def create_ai(ai_type: str) -> BaseAI:
        ai_types = {
            "fish": FishAI,
            "nit": NitAI,
            "tag": TAGAI,
            "lag": LAGAI
        }
        
        if ai_type not in ai_types:
            raise ValueError(f"Unknown AI type: {ai_type}")
        
        return ai_types[ai_type]()
    
    @staticmethod
    def get_ai_types() -> List[str]:
        return ["fish", "nit", "tag", "lag"]
    
    # –í ai_opponents.py - –û–ë–ù–û–í–ò–¢–¨:

@staticmethod
def get_ai_description(ai_type: str) -> str:
    descriptions = {
        "fish": """
üêü **Fish AI** - –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö
‚Ä¢ –ò–≥—Ä–∞–µ—Ç –º–Ω–æ–≥–æ —Ä—É–∫ (–ª—É–∑–æ–≤—ã–π)
‚Ä¢ –ß–∞—Å—Ç–æ –∫–æ–ª–ª–∏—Ä—É–µ—Ç (–ø–∞—Å—Å–∏–≤–Ω—ã–π)
‚Ä¢ –†–µ–¥–∫–æ —Ä–µ–π–∑–∏—Ç
‚Ä¢ ü§ì –û—Ç–ª–∏—á–Ω–æ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –∏–≥—Ä—ã
        """,
        "nit": """
üõ°Ô∏è **Nit AI** - –°–≤–µ—Ä—Ö—Ç–∞–π—Ç–æ–≤—ã–π –æ–ø–ø–æ–Ω–µ–Ω—Ç  
‚Ä¢ –ò–≥—Ä–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º —Ä—É–∫–∏
‚Ä¢ –ß–∞—Å—Ç–æ —Ñ–æ–ª–¥–∏—Ç
‚Ä¢ –ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
‚Ä¢ üéØ –¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å –ø—Ä–æ—Ç–∏–≤ —Ç–∞–π—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        """,
        "tag": """
üéØ **TAG AI** - –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
‚Ä¢ –¢–∞–π—Ç–æ–≤—ã–π –ø—Ä–µ—Ñ–ª–æ–ø
‚Ä¢ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ—Å—Ç—Ñ–ª–æ–ø
‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
‚Ä¢ ‚ö° –ò–º–∏—Ç–∏—Ä—É–µ—Ç —Å–∏–ª—å–Ω—ã—Ö —Ä–µ–≥–∞–ª–æ–≤
        """,
        "lag": """
‚ö° **LAG AI** - –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –æ–ø–ø–æ–Ω–µ–Ω—Ç
‚Ä¢ –õ—É–∑–æ–≤—ã–π –ø—Ä–µ—Ñ–ª–æ–ø  
‚Ä¢ –ß–∞—Å—Ç—ã–µ —Ä–µ–π–∑—ã –∏ 3-–±–µ—Ç—ã
‚Ä¢ –î–∞–≤–∏—Ç —Å–ª–∞–±–æ—Å—Ç–∏
‚Ä¢ üî• –¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å –ø—Ä–æ—Ç–∏–≤ –∞–≥—Ä–µ—Å—Å–∏–∏
        """
    }
    return descriptions.get(ai_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø AI")

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI
def test_ai_opponents():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∏–≥—Ä—É
    game = PokerGame(["Player", "AI"])
    game.start_hand()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ AI
    for ai_type in AIFactory.get_ai_types():
        ai = AIFactory.create_ai(ai_type)
        action, amount = ai.decide_action(game, "AI")
        print(f"{ai.name}: {action.value} {amount}")

class MLEnhancedAI(BaseAI):
    def __init__(self, base_ai: BaseAI, ml_model):
        self.base_ai = base_ai
        self.ml_model = ml_model
        self.name = f"ML-{base_ai.name}"
        self.confidence_threshold = 0.7
    
    def decide_action(self, game: PokerGame, player: str) -> Tuple[Action, int]:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏—á–∏ –¥–ª—è ML
        features = self._extract_ml_features(game, player)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç ML
        ml_prediction = self.ml_model.predict(features)
        ml_confidence = self.ml_model.get_confidence(features)
        
        if ml_confidence > self.confidence_threshold:
            return self._ml_action_to_game_action(ml_prediction, game)
        else:
            # Fallback –Ω–∞ rule-based AI
            return self.base_ai.decide_action(game, player)
        

if __name__ == "__main__":
    test_ai_opponents()