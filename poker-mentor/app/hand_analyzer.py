import logging
from typing import Dict, List, Tuple, Optional
from app.poker_engine import PokerGame, Card, Rank, Suit, HandType

logger = logging.getLogger(__name__)

class HandAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–∫–µ—Ä–Ω—ã—Ö —Ä—É–∫ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    
    def __init__(self):
        self.hand_strengths = self._initialize_hand_strengths()
    
    def _initialize_hand_strengths(self) -> Dict[Tuple[str, str], float]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–ª—ã —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Ä—É–∫"""
        strengths = {}
        ranks = [r.value for r in Rank]
        
        # –ü—Ä–µ–º–∏—É–º —Ä—É–∫–∏
        premium_pairs = ['A', 'K', 'Q', 'J']
        for i, r1 in enumerate(ranks):
            for j, r2 in enumerate(ranks):
                hand = (r1, r2) if i >= j else (r2, r1)
                strength = self._calculate_hand_strength(hand)
                strengths[hand] = strength
        
        return strengths
    
    def _calculate_hand_strength(self, hand: Tuple[str, str]) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∏–ª—É —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ä—É–∫–∏"""
        r1, r2 = hand
        
        # –ü–∞—Ä—ã
        if r1 == r2:
            pair_strength = {
                'A': 0.99, 'K': 0.98, 'Q': 0.95, 'J': 0.92,
                'T': 0.88, '9': 0.82, '8': 0.78, '7': 0.74,
                '6': 0.70, '5': 0.66, '4': 0.62, '3': 0.58, '2': 0.54
            }
            return pair_strength.get(r1, 0.5)
        
        # suited —Ä—É–∫–∏
        suited_bonus = 0.1
        
        # –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
        rank_values = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, 
                      '8': 8, '9': 9, 'T': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}
        
        gap = abs(rank_values[r1] - rank_values[r2])
        connector_bonus = max(0, 0.15 - gap * 0.03)
        
        # –ë–∞–∑–æ–≤–∞—è —Å–∏–ª–∞ –ø–æ —Å—Ç–∞—Ä—à–µ–π –∫–∞—Ä—Ç–µ
        high_card_strength = (rank_values[r1] - 2) / 12 * 0.6
        
        return high_card_strength + suited_bonus + connector_bonus
    
# –í hand_analyzer.py - –î–û–ë–ê–í–ò–¢–¨:

    def analyze_preflop_hand(self, cards: List[Card], position: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ñ–ª–æ–ø —Ä—É–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            if len(cards) != 2:
                return {"error": "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–Ω–æ 2 –∫–∞—Ä—Ç—ã"}
        
            card1, card2 = cards
            hand_key = (card1.rank.value, card2.rank.value)
            suited = card1.suit == card2.suit
            is_pair = card1.rank == card2.rank
        
            strength = self.hand_strengths.get(hand_key, 0.5)
        
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
            position_multiplier = {
                "early": 0.8,   # –†–∞–Ω–Ω—è—è –ø–æ–∑–∏—Ü–∏—è - –∏–≥—Ä–∞–µ–º —Ç–∞–π—Ç–æ–≤–µ–µ
                "middle": 1.0,  # –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è
                "late": 1.2,    # –ü–æ–∑–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è - –∏–≥—Ä–∞–µ–º –ª—É–∑–æ–≤–µ–µ
                "blinds": 0.9   # –ë–ª–∞–π–Ω–¥—ã
            }.get(position, 1.0)
        
            adjusted_strength = strength * position_multiplier
        
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            recommendations = self._generate_preflop_recommendations(
                cards, adjusted_strength, position
            )
        
            return {
                "hand": f"{card1.rank.value}{card2.rank.value}{'s' if suited else 'o'}",
                "strength": round(adjusted_strength, 2),
                "category": self._get_hand_category(adjusted_strength),
                "recommendations": recommendations,
                "position": position,
                "suited": suited,
                "is_pair": is_pair
            }
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—É–∫–∏: {e}")
            return {"error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"}
    
    def _get_hand_category(self, strength: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä—É–∫–∏"""
        if strength >= 0.85:
            return "üíé –ü—Ä–µ–º–∏—É–º"
        elif strength >= 0.75:
            return "üéØ –°–∏–ª—å–Ω–∞—è"
        elif strength >= 0.60:
            return "üìä –°—Ä–µ–¥–Ω—è—è"
        elif strength >= 0.45:
            return "üõ°Ô∏è –ú–∞—Ä–≥–∏–Ω–∞–ª—å–Ω–∞—è"
        else:
            return "üóëÔ∏è –°–ª–∞–±–∞—è"
    
    def _generate_preflop_recommendations(self, cards: List[Card], strength: float, position: str) -> List[str]:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ—Ñ–ª–æ–ø–∞"""
        recommendations = []
        card1, card2 = cards
        
        # –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∏–ª–µ —Ä—É–∫–∏
        if strength >= 0.8:
            recommendations.append("‚úÖ **–†–µ–π–∑** - —Å–∏–ª—å–Ω–∞—è —Ä—É–∫–∞, –Ω—É–∂–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –∏–≥—Ä–∞—Ç—å")
            recommendations.append("üìà –ú–æ–∂–Ω–æ 3-–±–µ—Ç–∏—Ç—å –ø—Ä–æ—Ç–∏–≤ —Ä–µ–π–∑–æ–≤")
        elif strength >= 0.6:
            recommendations.append("‚úÖ **–ö–æ–ª–ª/–†–µ–π–∑** - —Ö–æ—Ä–æ—à–∞—è —Ä—É–∫–∞ –¥–ª—è –∏–≥—Ä—ã")
            if position in ["late", "blinds"]:
                recommendations.append("üéØ –í –ø–æ–∑–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏ –º–æ–∂–Ω–æ —Ä–µ–π–∑–∏—Ç—å")
        elif strength >= 0.45:
            recommendations.append("‚ö†Ô∏è **–û—Å—Ç–æ—Ä–æ–∂–Ω–æ** - –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ö–æ—Ä–æ—à–µ–π –ø–æ–∑–∏—Ü–∏–∏")
            recommendations.append("üìâ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ–ª–¥ –ø—Ä–æ—Ç–∏–≤ –∞–≥—Ä–µ—Å—Å–∏–∏")
        else:
            recommendations.append("‚ùå **–§–æ–ª–¥** - —Å–ª–∞–±–∞—è —Ä—É–∫–∞")
            recommendations.append("üí° –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Å—Ç–µ–∫ –¥–ª—è –ª—É—á—à–∏—Ö —Ä—É–∫")
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if card1.rank == card2.rank:
            recommendations.append(f"üîÑ **–ü–∞—Ä–∞ {card1.rank.value}** - –∏–≥—Ä–∞–π—Ç–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ")
        
        if card1.suit == card2.suit:
            recommendations.append("üåà **Suited** - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ñ–ª–µ—à–µ–π")
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if position == "early":
            recommendations.append("üé™ **–†–∞–Ω–Ω—è—è –ø–æ–∑–∏—Ü–∏—è** - –∏–≥—Ä–∞–π—Ç–µ —Ç–∞–π—Ç–æ–≤–µ–µ")
        elif position == "late":
            recommendations.append("üé™ **–ü–æ–∑–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è** - –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å –ª—É–∑–æ–≤–µ–µ")
        
        return recommendations
    
    def analyze_postflop_equity(self, hole_cards: List[Card], community_cards: List[Card], 
                              opponent_range: List[str] = None) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —ç–∫–≤–∏—Ç–∏ –Ω–∞ –ø–æ—Å—Ç—Ñ–ª–æ–ø–µ"""
        if len(hole_cards) != 2:
            return {"error": "–ù—É–∂–Ω–æ 2 –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞"}
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —ç–∫–≤–∏—Ç–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)
        hand_strength = self._estimate_hand_strength(hole_cards, community_cards)
        equity = self._calculate_rough_equity(hand_strength, len(community_cards))
        
        return {
            "equity": equity,
            "hand_strength": hand_strength,
            "recommendations": self._generate_postflop_recommendations(equity, len(community_cards))
        }
    
    def _estimate_hand_strength(self, hole_cards: List[Card], community_cards: List[Card]) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Å–∏–ª—ã —Ä—É–∫–∏ –Ω–∞ –ø–æ—Å—Ç—Ñ–ª–æ–ø–µ"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω equity calculator)
        all_cards = hole_cards + community_cards
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥–æ—Ç–æ–≤—ã–µ —Ä—É–∫–∏
        if len(community_cards) >= 3:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ª—É—á—à–µ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑ 5 –∫–∞—Ä—Ç
            return 0.5  # –ó–∞–≥–ª—É—à–∫–∞
        
        return 0.3  # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    
    def _calculate_rough_equity(self, hand_strength: float, street: int) -> float:
        """–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç —ç–∫–≤–∏—Ç–∏"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã —Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã)
        base_equity = hand_strength
        street_multiplier = {0: 1.0, 3: 0.8, 4: 0.9, 5: 1.0}  # –ø—Ä–µ—Ñ–ª–æ–ø, —Ñ–ª–æ–ø, —Ç–µ—Ä–Ω, —Ä–∏–≤–µ—Ä
        
        return min(0.95, base_equity * street_multiplier.get(street, 1.0))
    
    def _generate_postflop_recommendations(self, equity: float, street: int) -> List[str]:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç—Ñ–ª–æ–ø–∞"""
        recommendations = []
        
        if equity >= 0.70:
            recommendations.append("üöÄ **–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∏–≥—Ä–∞** - —É –≤–∞—Å —Å–∏–ª—å–Ω–æ–µ —ç–∫–≤–∏—Ç–∏")
            recommendations.append("üìà –†–µ–π–∑—å—Ç–µ –¥–ª—è –∑–∞—â–∏—Ç—ã —Ä—É–∫–∏")
        elif equity >= 0.50:
            recommendations.append("‚úÖ **–£–º–µ—Ä–µ–Ω–Ω–∞—è –∏–≥—Ä–∞** - —Ö–æ—Ä–æ—à–∏–µ —à–∞–Ω—Å—ã")
            recommendations.append("‚öñÔ∏è –ö–æ–ª–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏")
        elif equity >= 0.30:
            recommendations.append("‚ö†Ô∏è **–û—Å—Ç–æ—Ä–æ–∂–Ω–∞—è –∏–≥—Ä–∞** - —Å–ª–∞–±–æ–µ —ç–∫–≤–∏—Ç–∏")
            recommendations.append("üìâ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–æ–ª–¥ –ø—Ä–æ—Ç–∏–≤ –∞–≥—Ä–µ—Å—Å–∏–∏")
        else:
            recommendations.append("‚ùå **–°–ª–∞–±—ã–µ —à–∞–Ω—Å—ã** - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ñ–æ–ª–¥")
            recommendations.append("üí° –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Å—Ç–µ–∫")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª–∏—Ü–∞–º
        if street == 3:  # —Ñ–ª–æ–ø
            recommendations.append("üÉè **–§–ª–æ–ø** - –æ—Ü–µ–Ω–∏—Ç–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥—Ä–æ")
        elif street == 4:  # —Ç–µ—Ä–Ω
            recommendations.append("üÉè **–¢–µ—Ä–Ω** - –º–Ω–æ–≥–∏–µ –¥—Ä–æ –Ω–µ –¥–æ–µ—Ö–∞–ª–∏")
        elif street == 5:  # —Ä–∏–≤–µ—Ä
            recommendations.append("üÉè **–†–∏–≤–µ—Ä** - –∏–≥—Ä–∞–π—Ç–µ –ø–æ –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–π —Å–∏–ª–µ")
        
        return recommendations

class HandHistoryAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Ä—É–∫"""
    
    def __init__(self):
        self.analyzer = HandAnalyzer()
    
    def analyze_completed_hand(self, hand_data: Dict) -> Dict:
        """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Ä–∞–∑–¥–∞—á—É"""
        analysis = {
            "rating": 0,
            "mistakes": [],
            "good_plays": [],
            "ev_calculation": 0,
            "improvement_tips": []
        }
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ñ–ª–æ–ø–∞
        preflop_analysis = self._analyze_preflop_decision(hand_data)
        analysis.update(preflop_analysis)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç—Ñ–ª–æ–ø–∞
        postflop_analysis = self._analyze_postflop_decisions(hand_data)
        analysis.update(postflop_analysis)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        analysis["rating"] = self._calculate_hand_rating(analysis)
        
        return analysis
    
    def _analyze_preflop_decision(self, hand_data: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ñ–ª–æ–ø —Ä–µ—à–µ–Ω–∏–π"""
        result = {"preflop_mistakes": [], "preflop_good": []}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã —Ä—É–∫–∏ –∏ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
        hand_strength = hand_data.get("hand_strength", 0.5)
        action = hand_data.get("preflop_action", "")
        position = hand_data.get("position", "")
        
        if hand_strength < 0.4 and action == "raise":
            result["preflop_mistakes"].append("–†–µ–π–∑ —Å–æ —Å–ª–∞–±–æ–π —Ä—É–∫–æ–π")
        elif hand_strength > 0.7 and action == "fold":
            result["preflop_mistakes"].append("–§–æ–ª–¥ —Å –ø—Ä–µ–º–∏—É–º —Ä—É–∫–æ–π")
        elif hand_strength > 0.6 and action == "raise":
            result["preflop_good"].append("–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∏–≥—Ä–∞ —Å —Å–∏–ª—å–Ω–æ–π —Ä—É–∫–æ–π")
        
        return result
    
    def _analyze_postflop_decisions(self, hand_data: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç—Ñ–ª–æ–ø —Ä–µ—à–µ–Ω–∏–π"""
        return {
            "postflop_mistakes": [],
            "postflop_good": [],
            "ev_analysis": "–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ EV"
        }
    
    def _calculate_hand_rating(self, analysis: Dict) -> int:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Ä–∞–∑–¥–∞—á–∏ (1-10)"""
        base_rating = 7
        mistakes = len(analysis.get("preflop_mistakes", [])) + len(analysis.get("postflop_mistakes", []))
        good_plays = len(analysis.get("preflop_good", [])) + len(analysis.get("postflop_good", []))
        
        rating = base_rating - mistakes + good_plays
        return max(1, min(10, rating))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
hand_analyzer = HandAnalyzer()
history_analyzer = HandHistoryAnalyzer()